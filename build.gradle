plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "co.uzzu.dotenv.gradle" version "4.0.0"
    id "com.diffplug.spotless" version "6.25.0"
    id "org.owasp.dependencycheck" version "9.0.10"
}

group = 'com.schmogel'
version = '1.0.5'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
    jarName = 'eventosfull-app.jar'
}

dependencies {

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

  // mail
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core"
    runtimeOnly 'org.postgresql:postgresql'

    // Testes
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'

    // Desenvolvimento
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.register('generateVersionProperties') {
  doLast {
    def versionFile = file("${layout.buildDirectory.get()}/resources/main/version.properties")
    versionFile.parentFile.mkdirs()
    versionFile.text = "version=${version}"
  }
}

processResources.dependsOn generateVersionProperties


tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('renameJar') {
  dependsOn 'jar'
  doLast {
    def oldJar = file("${layout.buildDirectory.get()}/libs/eventosfull-${version}.jar")
    def newJar = file("${layout.buildDirectory.get()}/libs/${jarName}")

    if (oldJar.exists()) {
      oldJar.renameTo(newJar)
    }
  }
}
